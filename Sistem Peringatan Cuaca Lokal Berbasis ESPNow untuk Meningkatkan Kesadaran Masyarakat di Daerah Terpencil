#include <ESP8266WiFi.h>
#include <ESP8266HTTPClient.h>
#include <Wire.h>
#include <Adafruit_BMP280.h>
#include <DHT.h>
#include <SoftwareSerial.h>

#define DHTPIN D4
#define DHTTYPE DHT22
#define RXPin D7
#define TXPin D6
#define RAIN_SENSOR_PIN D3
#define WIFI_SSID "your_wifi_ssid"
#define WIFI_PASS "your_wifi_password"
#define SERVER_IP "192.168.1.100"

SoftwareSerial gpsSerial(RXPin, TXPin);
DHT dht(DHTPIN, DHTTYPE);
Adafruit_BMP280 bmp;

void setup() {
    Serial.begin(115200);
    gpsSerial.begin(9600);
    dht.begin();
    bmp.begin();

    WiFi.begin(WIFI_SSID, WIFI_PASS);
    while (WiFi.status() != WL_CONNECTED) {
        delay(500);
        Serial.print(".");
    }
    Serial.println("\nConnected to WiFi");
}

void loop() {
    float temp = dht.readTemperature();
    float hum = dht.readHumidity();
    float pressure = bmp.readPressure() / 100.0F;
    float altitude = bmp.readAltitude(1013.25);
    int rain_value = analogRead(RAIN_SENSOR_PIN);

    String gpsData = getGPSData();

    if (WiFi.status() == WL_CONNECTED) {
        HTTPClient http;
        String url = "http://" + String(SERVER_IP) + "/receive?";
        url += "temp=" + String(temp) + "&hum=" + String(hum);
        url += "&pressure=" + String(pressure) + "&altitude=" + String(altitude);
        url += "&rain=" + String(rain_value) + "&gps=" + gpsData;

        http.begin(url);
        int httpResponseCode = http.GET();
        http.end();
    }

    delay(5000);
}

String getGPSData() {
    String gpsString = "";
    while (gpsSerial.available()) {
        char c = gpsSerial.read();
        gpsString += c;
    }
    return gpsString;
}

#include <ESP8266WiFi.h>
#include <ESP8266WebServer.h>
#include <Wire.h>
#include <Adafruit_SSD1306.h>

#define SCREEN_WIDTH 128
#define SCREEN_HEIGHT 64
#define OLED_RESET -1
#define LED_PIN D5
#define BUZZER_PIN D5

Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);
ESP8266WebServer server(80);

String temp, hum, pressure, altitude, rain, gpsData;

void setup() {
    Serial.begin(115200);
    WiFi.begin("your_wifi_ssid", "your_wifi_password");

    while (WiFi.status() != WL_CONNECTED) {
        delay(500);
        Serial.print(".");
    }
    Serial.println("\nConnected to WiFi");

    if (!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) {
        Serial.println("SSD1306 allocation failed");
        for (;;);
    }

    pinMode(LED_PIN, OUTPUT);
    pinMode(BUZZER_PIN, OUTPUT);

    server.on("/receive", handleReceive);
    server.begin();
}

void loop() {
    server.handleClient();
    updateDisplay();
}

void handleReceive() {
    if (server.hasArg("temp")) temp = server.arg("temp");
    if (server.hasArg("hum")) hum = server.arg("hum");
    if (server.hasArg("pressure")) pressure = server.arg("pressure");
    if (server.hasArg("altitude")) altitude = server.arg("altitude");
    if (server.hasArg("rain")) rain = server.arg("rain");
    if (server.hasArg("gps")) gpsData = server.arg("gps");

    if (rain.toInt() < 500) {
        digitalWrite(LED_PIN, HIGH);
        digitalWrite(BUZZER_PIN, HIGH);
    } else {
        digitalWrite(LED_PIN, LOW);
        digitalWrite(BUZZER_PIN, LOW);
    }

    server.send(200, "text/plain", "Data received");
}

void updateDisplay() {
    display.clearDisplay();
    display.setTextSize(1);
    display.setTextColor(WHITE);
    display.setCursor(0, 0);
    display.println("Weather Station");
    display.print("Temp: "); display.println(temp);
    display.print("Hum: "); display.println(hum);
    display.print("Pressure: "); display.println(pressure);
    display.print("Altitude: "); display.println(altitude);
    display.print("Rain: "); display.println(rain);
    display.print("GPS: "); display.println(gpsData);
    display.display();
}
